# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-05-27 16:57
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=64)),
                ('code', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'action',
            },
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('summary', models.CharField(max_length=300)),
                ('ctime', models.DateTimeField(auto_now_add=True, null=True)),
                ('comments', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('status', models.SmallIntegerField(choices=[(-1, '审核'), (0, '草稿'), (1, '公开')], null=True)),
                ('is_top', models.BooleanField(choices=[(0, '置顶'), (1, '不置顶')], default=0)),
                ('p_url', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': '文章表',
                'verbose_name': '文章表',
                'db_table': 'articles',
            },
        ),
        migrations.CreateModel(
            name='ArticlesCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('sort', models.IntegerField(null=True)),
                ('root_id', models.IntegerField(default=0)),
                ('parent_id', models.IntegerField(default=0)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '文章分类表',
                'verbose_name': '文章分类表',
                'db_table': 'articles_category',
            },
        ),
        migrations.CreateModel(
            name='ArticlesComements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('root_id', models.IntegerField(null=True)),
                ('parent_id', models.IntegerField(null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Articles')),
            ],
            options={
                'verbose_name_plural': '文章评论表',
                'verbose_name': '文章评论表',
                'db_table': 'articles_comements',
            },
        ),
        migrations.CreateModel(
            name='ArticlesDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='reposition.Articles')),
            ],
            options={
                'verbose_name_plural': '文章内容表',
                'verbose_name': '文章内容表',
                'db_table': 'articles_details',
            },
        ),
        migrations.CreateModel(
            name='ArticlesPraise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('praise', models.SmallIntegerField(null=True)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('articles', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Articles')),
            ],
            options={
                'verbose_name_plural': '文章点赞表',
                'verbose_name': '文章点赞表',
                'db_table': 'articles_praise',
            },
        ),
        migrations.CreateModel(
            name='ArticlesTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('counts', models.IntegerField(default=0)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '文章标签表',
                'verbose_name': '文章标签表',
                'db_table': 'articles_tag',
            },
        ),
        migrations.CreateModel(
            name='ArticlesToTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Articles')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.ArticlesTag')),
            ],
            options={
                'verbose_name_plural': '文章对应的标签表',
                'verbose_name': '文章对应的标签表',
                'db_table': 'articles_to_tag',
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counts', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=40)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '作者表',
                'verbose_name': '作者表',
                'db_table': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Bxslider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(choices=[(0, '下架'), (1, '上架')], default=1)),
                ('name', models.CharField(max_length=50)),
                ('img', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=100)),
                ('weight', models.IntegerField(default=0)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('size', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': '首页轮播图表',
                'verbose_name': '首页轮播图表',
                'db_table': 'bxslider',
            },
        ),
        migrations.CreateModel(
            name='China',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField()),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'china',
            },
        ),
        migrations.CreateModel(
            name='ClientInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='客户姓名')),
                ('mobile', models.CharField(max_length=11, verbose_name='客户手机')),
                ('source', models.SmallIntegerField(choices=[(0, 'web端'), (1, 'pc端'), (2, '微信'), (3, '推荐')], verbose_name='客户来源')),
                ('group', models.SmallIntegerField(choices=[(0, '潜在客户'), (1, '意向客户'), (2, '无效用户')], verbose_name='所属分组')),
                ('is_reg', models.SmallIntegerField(choices=[(0, '未注册'), (1, '已注册')], verbose_name='是否注册')),
                ('user', models.IntegerField(blank=True, null=True, verbose_name='客户账户')),
            ],
            options={
                'verbose_name_plural': '客户表',
                'verbose_name': '客户表',
                'db_table': 'client_info',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='部门')),
            ],
            options={
                'verbose_name_plural': '部门表',
                'verbose_name': '部门表',
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='Employee2Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'employee2role',
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100, verbose_name='邮箱')),
                ('name', models.CharField(max_length=30, verbose_name='姓名')),
                ('password', models.CharField(max_length=40)),
                ('phone', models.CharField(max_length=11, verbose_name='手机')),
                ('qq', models.CharField(blank=True, max_length=15, null=True, verbose_name='QQ')),
                ('wechat', models.CharField(blank=True, max_length=30, null=True, verbose_name='微信')),
                ('entry_time', models.DateField(blank=True, null=True, verbose_name='入职时间')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('gender', models.SmallIntegerField(choices=[(0, '男'), (1, '女')], null=True, verbose_name='性别')),
                ('job_number', models.CharField(max_length=8, null=True, unique=True, verbose_name='工号')),
                ('reg_time', models.DateField(auto_now_add=True, verbose_name='注册时间')),
                ('last_ip', models.CharField(blank=True, max_length=20, null=True)),
                ('last_time', models.DateTimeField(blank=True, null=True, verbose_name='上一次登陆')),
                ('status', models.SmallIntegerField(blank=True, choices=[(0, '真实'), (1, '虚假')], default=0)),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Department', verbose_name='部门')),
            ],
            options={
                'verbose_name_plural': '员工表',
                'verbose_name': '员工表',
                'db_table': 'employees',
            },
        ),
        migrations.CreateModel(
            name='IndexNav',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='名称')),
                ('weight', models.IntegerField(default=0, verbose_name='权重')),
                ('url', models.CharField(max_length=100, verbose_name='网址')),
                ('status', models.SmallIntegerField(choices=[(0, '下架'), (1, '上线')], default=1, verbose_name='状态')),
                ('ishot', models.SmallIntegerField(choices=[(0, '不热门'), (1, '热门')], verbose_name='热门')),
                ('ctime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees', verbose_name='创建人')),
            ],
            options={
                'verbose_name_plural': '导航表',
                'verbose_name': '导航表',
                'db_table': 'indexnavs',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=32, unique=True)),
                ('weight', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu_p', to='reposition.Menu')),
            ],
            options={
                'verbose_name_plural': '后台菜单表',
                'verbose_name': '后台菜单表',
                'db_table': 'menu',
            },
        ),
        migrations.CreateModel(
            name='MessagesSend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField()),
                ('response_time', models.CharField(max_length=30)),
                ('message_id', models.CharField(max_length=30)),
                ('content', models.CharField(max_length=1000)),
                ('phone', models.CharField(max_length=11)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees')),
            ],
            options={
                'verbose_name_plural': '短信发送表',
                'verbose_name': '短信发送表',
                'db_table': 'messages_send',
            },
        ),
        migrations.CreateModel(
            name='MessagesVerifyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('m_status', models.IntegerField(db_column='m_Status')),
                ('m_response_time', models.CharField(db_column='m_Response_Time', max_length=30)),
                ('m_messageid', models.CharField(db_column='m_MessageID', max_length=30)),
                ('m_text', models.CharField(db_column='m_Text', max_length=300)),
                ('m_phone', models.CharField(db_column='m_Phone', max_length=11)),
                ('m_send_date', models.DateTimeField(auto_now_add=True, db_column='m_Send_Date')),
                ('m_verifycode', models.IntegerField(db_column='m_verifyCode')),
            ],
            options={
                'verbose_name_plural': '验证码短信表',
                'verbose_name': '验证码短信表',
                'db_table': 'messages_verify_code',
            },
        ),
        migrations.CreateModel(
            name='MyTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(blank=True, choices=[(0, '未完成'), (1, '已完成')], default=0)),
                ('ctime', models.DateTimeField(auto_now_add=True, verbose_name='分配时间')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees', verbose_name='员工姓名')),
            ],
            options={
                'verbose_name_plural': '我的任务',
                'verbose_name': '我的任务',
                'db_table': 'my_task',
            },
        ),
        migrations.CreateModel(
            name='OrderPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_code', models.CharField(max_length=18, unique=True, verbose_name='订单号')),
                ('status', models.SmallIntegerField(choices=[(0, '待支付'), (1, '支付成功'), (2, '支付失败'), (3, '交易关闭')], default=0, verbose_name='支付状态')),
                ('total_price', models.FloatField(verbose_name='总价格')),
                ('coupon_price', models.IntegerField(default=0, verbose_name='优惠价格')),
                ('pay_price', models.FloatField(default=0, verbose_name='支付价格')),
                ('payment', models.SmallIntegerField(choices=[(0, '支付宝'), (1, '微信'), (2, '线下支付'), (3, '网银支付')], null=True, verbose_name='支付方式')),
                ('ctime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('ftime', models.DateTimeField(null=True, verbose_name='支付时间')),
            ],
            options={
                'verbose_name_plural': '支付记录表',
                'verbose_name': '支付记录表',
                'db_table': 'orders_payment',
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.IntegerField(blank=True)),
                ('product_name', models.CharField(blank=True, max_length=100)),
                ('order_code', models.CharField(max_length=18)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('cprice', models.FloatField(db_column='cPrice')),
                ('number', models.IntegerField(default=1)),
                ('coupon', models.FloatField(default=0)),
                ('voucher', models.FloatField(default=0)),
                ('total_price', models.FloatField()),
                ('order_state', models.SmallIntegerField(choices=[(0, '待付款'), (1, '待服务'), (2, '服务中'), (3, '服务完成'), (4, '退款中'), (5, '退款完成'), (6, '交易关闭')], default=0)),
                ('type', models.SmallIntegerField(choices=[(0, '待付款'), (1, '待服务'), (2, '服务中'), (3, '服务完成'), (4, '退款中'), (5, '退款完成'), (6, '交易关闭')], default=0)),
                ('username', models.CharField(max_length=20, null=True)),
                ('name', models.CharField(max_length=30)),
                ('phone', models.CharField(max_length=11)),
                ('order_process', models.CharField(max_length=20, null=True)),
                ('remark', models.CharField(max_length=600, null=True)),
                ('category', models.CharField(max_length=30, null=True)),
                ('province', models.CharField(max_length=20, null=True)),
                ('city', models.CharField(max_length=64, null=True)),
                ('area', models.CharField(max_length=64, null=True)),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Employees')),
            ],
            options={
                'verbose_name_plural': '订单表',
                'verbose_name': '订单表',
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='OrderSerice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(0, '未开始'), (1, '开始服务'), (2, '服务中'), (3, '暂定服务'), (4, '服务结束')], default=0, verbose_name='服务状态')),
                ('allocation_status', models.SmallIntegerField(choices=[(0, '未分配'), (1, '已分配')], default=False, verbose_name='分配状态')),
                ('ctime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('start_time', models.DateTimeField(null=True, verbose_name='分配时间')),
                ('end_time', models.DateTimeField(null=True, verbose_name='完成时间')),
                ('city', models.CharField(max_length=64, verbose_name='城市')),
                ('area', models.CharField(max_length=64, verbose_name='地区')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='reposition.Orders', verbose_name='订单号')),
            ],
            options={
                'verbose_name_plural': '订单服务分配表',
                'verbose_name': '订单服务分配表',
                'db_table': 'order_serice',
            },
        ),
        migrations.CreateModel(
            name='Package2Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'package2product',
            },
        ),
        migrations.CreateModel(
            name='PaymengAlipy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('out_trade_no', models.CharField(max_length=20, verbose_name='订单号')),
                ('trade_no', models.CharField(max_length=30, verbose_name='支付宝单号')),
                ('trade_status', models.CharField(max_length=18, verbose_name='交易状态')),
                ('payment_type', models.SmallIntegerField(verbose_name='交易方式')),
                ('notify_time', models.CharField(max_length=25, verbose_name='交易时间')),
                ('is_success', models.CharField(max_length=5, verbose_name='成功状态')),
                ('notify_type', models.CharField(max_length=20, verbose_name='通知类型')),
                ('buyer_id', models.CharField(max_length=16, verbose_name='用户标识')),
                ('buyer_email', models.CharField(max_length=64, verbose_name='买家邮箱')),
                ('total_fee', models.FloatField(verbose_name='交易金额')),
                ('pay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.OrderPayment')),
            ],
            options={
                'verbose_name_plural': '支付宝支付信息表',
                'verbose_name': '支付宝支付信息表',
                'db_table': 'orders_payment_alipy',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=32)),
                ('url', models.CharField(max_length=32)),
                ('weight', models.IntegerField(default=0)),
                ('menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Menu')),
            ],
            options={
                'db_table': 'permission',
            },
        ),
        migrations.CreateModel(
            name='Permission2Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Action')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Permission')),
            ],
            options={
                'db_table': 'permission2action',
            },
        ),
        migrations.CreateModel(
            name='Permission2Action2Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p2a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Permission2Action')),
            ],
            options={
                'db_table': 'permission2action2role',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='职位')),
                ('description', models.TextField(blank=True, null=True, verbose_name='岗位工作描述')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Department', verbose_name='部门')),
            ],
            options={
                'verbose_name_plural': '职位表',
                'verbose_name': '职位表',
                'db_table': 'position',
            },
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_name', models.CharField(max_length=30)),
                ('step_name', models.CharField(max_length=30)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('re_mark', models.TextField(null=True)),
                ('employee_name', models.CharField(max_length=30)),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Employees')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Orders')),
            ],
            options={
                'verbose_name_plural': '订单进展表',
                'verbose_name': '订单进展表',
                'db_table': 'process',
            },
        ),
        migrations.CreateModel(
            name='ProcessName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('mtime', models.DateTimeField(null=True)),
                ('state', models.IntegerField(default=1)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Employees')),
            ],
            options={
                'verbose_name_plural': '订单进展名字表',
                'verbose_name': '订单进展名字表',
                'db_table': 'process_name',
            },
        ),
        migrations.CreateModel(
            name='ProcessStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_name', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('number', models.IntegerField()),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('mtime', models.DateTimeField(null=True)),
                ('state', models.IntegerField(default=1)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees')),
                ('p_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.ProcessName')),
            ],
            options={
                'verbose_name_plural': '业务具体步骤表',
                'verbose_name': '业务具体步骤表',
                'db_table': 'process_step',
            },
        ),
        migrations.CreateModel(
            name='Product2area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p_price', models.FloatField(db_column='p_Price')),
                ('p_market_price', models.FloatField(db_column='p_Market_Price', null=True)),
            ],
            options={
                'db_table': 'product_to_area',
            },
        ),
        migrations.CreateModel(
            name='Product2Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'product2package',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='分类名字')),
                ('count', models.IntegerField(db_column='cate_Count', default=0, verbose_name='文章数量')),
                ('root_id', models.SmallIntegerField(db_column='cate_RootID', default=0)),
                ('parent_id', models.SmallIntegerField(db_column='cate_ParentID', default=0)),
                ('sort', models.IntegerField(db_column='cate_Sort', default=0, verbose_name='权重')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='cate_Date', verbose_name='创建日期')),
                ('employee', models.ForeignKey(db_column='cate_Employee_id', on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees', verbose_name='创建员工')),
            ],
            options={
                'verbose_name_plural': '产品分类表',
                'verbose_name': '产品分类表',
                'db_table': 'product_category',
            },
        ),
        migrations.CreateModel(
            name='ProductCImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ul_name', models.CharField(db_column='ul_Name', max_length=100, null=True)),
                ('ul_sourcename', models.CharField(db_column='ul_SourceName', max_length=30, null=True)),
                ('ul_type', models.CharField(db_column='ul_Type', max_length=10, null=True)),
                ('ul_size', models.IntegerField(db_column='ul_Size', null=True)),
                ('ul_posttime', models.DateTimeField(auto_now_add=True, db_column='ul_PostTime', null=True)),
                ('ul_url', models.CharField(db_column='ul_Url', max_length=100, null=True)),
                ('ul_employee', models.ForeignKey(db_column='ul_Employee_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees')),
            ],
            options={
                'verbose_name_plural': '产品内容图片表',
                'verbose_name': '产品内容图片表',
                'db_table': 'product_c_image',
            },
        ),
        migrations.CreateModel(
            name='ProductPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='套餐名')),
                ('dscription', models.TextField(verbose_name='描述')),
                ('cprice', models.SmallIntegerField(verbose_name='价格')),
                ('original_price', models.SmallIntegerField(verbose_name='原价')),
            ],
            options={
                'db_table': 'product_package',
            },
        ),
        migrations.CreateModel(
            name='ProductRecommend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='产品名字')),
                ('price', models.FloatField(verbose_name='价格')),
                ('description', models.CharField(max_length=100, verbose_name='描述')),
                ('status', models.SmallIntegerField(choices=[(0, '推荐'), (1, '下线')], default=0, verbose_name='状态')),
            ],
            options={
                'db_table': 'product_recommend',
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p_name', models.CharField(db_column='p_Name', max_length=64)),
                ('p_price', models.FloatField(db_column='p_Price')),
                ('p_market_price', models.FloatField(db_column='p_Market_Price', null=True)),
                ('p_details', models.TextField(db_column='p_Details', verbose_name='产品内容')),
                ('p_putaway', models.SmallIntegerField(choices=[(0, '下架'), (1, '上架')], db_column='p_Putaway', default=1)),
                ('p_top', models.SmallIntegerField(choices=[(0, '不推荐'), (1, '推荐')], db_column='p_Top', default=0)),
                ('p_seo_keyword', models.CharField(db_column='p_Seo_Keyword', max_length=100, null=True)),
                ('p_seo_description', models.CharField(db_column='p_Seo_Description', max_length=200, null=True)),
                ('p_ctime', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'verbose_name_plural': '产品表',
                'verbose_name': '产品表',
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('number', models.IntegerField(null=True)),
                ('renewal_reminder', models.SmallIntegerField(choices=[(0, '不提醒'), (1, '提醒')], default=0)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.ProductCategory')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Employees')),
                ('root', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.ProductService')),
            ],
            options={
                'verbose_name_plural': '产品服务表',
                'verbose_name': '产品服务表',
                'db_table': 'product_service',
            },
        ),
        migrations.CreateModel(
            name='ProductTImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ul_name', models.CharField(db_column='ul_Name', max_length=255, null=True)),
                ('ul_sourcename', models.CharField(db_column='ul_SourceName', max_length=255, null=True)),
                ('ul_type', models.CharField(db_column='ul_Type', max_length=10, null=True)),
                ('ul_size', models.IntegerField(db_column='ul_Size', null=True)),
                ('ul_posttime', models.DateTimeField(auto_now_add=True, db_column='ul_PostTime')),
                ('ul_url', models.CharField(db_column='ul_Url', max_length=100, null=True)),
                ('ul_employee', models.ForeignKey(db_column='ul_Employee_id', on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees')),
                ('ul_product', models.ForeignKey(db_column='ul_Product_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pro_image', to='reposition.Products')),
            ],
            options={
                'verbose_name_plural': '产品首图片表',
                'verbose_name': '产品首图片表',
                'db_table': 'product_t_image',
            },
        ),
        migrations.CreateModel(
            name='RegionalManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField()),
                ('name', models.CharField(max_length=30)),
                ('r_code', models.IntegerField(null=True)),
                ('p_code', models.IntegerField(null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.China')),
            ],
            options={
                'verbose_name_plural': '区域管理',
                'verbose_name': '区域管理',
                'db_table': 'regional_management',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='名字')),
            ],
            options={
                'verbose_name_plural': '权限角色表',
                'verbose_name': '权限角色表',
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='手机号码')),
                ('email', models.CharField(blank=True, max_length=100, verbose_name='邮箱')),
                ('name', models.CharField(max_length=30, verbose_name='称呼')),
                ('password', models.CharField(max_length=40, verbose_name='密码')),
                ('qq', models.CharField(blank=True, max_length=15, null=True, verbose_name='QQ')),
                ('wechat', models.CharField(blank=True, max_length=30, null=True, verbose_name='微信')),
                ('group', models.CharField(blank=True, max_length=30, null=True, verbose_name='分组')),
                ('remark', models.CharField(blank=True, max_length=300, null=True, verbose_name='备注')),
                ('referrer', models.CharField(blank=True, max_length=30, null=True, verbose_name='推荐')),
                ('balance', models.FloatField(blank=True, null=True, verbose_name='余额')),
                ('voucher', models.FloatField(blank=True, null=True, verbose_name='优惠卷')),
                ('province', models.SmallIntegerField(blank=True, null=True, verbose_name='省')),
                ('city', models.SmallIntegerField(blank=True, null=True, verbose_name='市')),
                ('area', models.SmallIntegerField(blank=True, null=True, verbose_name='区')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='地址')),
                ('source', models.CharField(blank=True, max_length=30, null=True, verbose_name='来源')),
                ('know', models.SmallIntegerField(choices=[(1, '搜索引擎'), (2, '线下活动'), (3, '微信微博'), (4, '朋友土建'), (5, '名片传单'), (6, '其他')], null=True, verbose_name='了解')),
                ('reg_employee', models.IntegerField(blank=True, null=True, verbose_name='注册员工')),
                ('reg_time', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('last_time', models.DateTimeField(blank=True, null=True, verbose_name='最近登录')),
            ],
            options={
                'verbose_name_plural': '用户表',
                'verbose_name': '用户表',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UsersKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='名字')),
            ],
            options={
                'verbose_name_plural': '用户关键词',
                'verbose_name': '用户关键词',
                'db_table': 'user_keyword',
            },
        ),
        migrations.AddField(
            model_name='products',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.RegionalManagement'),
        ),
        migrations.AddField(
            model_name='products',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regional_city', to='reposition.RegionalManagement'),
        ),
        migrations.AddField(
            model_name='products',
            name='p_business',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.ProcessName'),
        ),
        migrations.AddField(
            model_name='products',
            name='p_category',
            field=models.ForeignKey(db_column='p_Category_id', on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.ProductCategory'),
        ),
        migrations.AddField(
            model_name='products',
            name='p_employee',
            field=models.ForeignKey(db_column='p_Employee_id', on_delete=django.db.models.deletion.DO_NOTHING, to='reposition.Employees'),
        ),
        migrations.AddField(
            model_name='products',
            name='p_service',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.ProductService'),
        ),
        migrations.AddField(
            model_name='productrecommend',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Products'),
        ),
        migrations.AddField(
            model_name='productpackage',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.RegionalManagement', verbose_name='地区'),
        ),
        migrations.AddField(
            model_name='productpackage',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees', verbose_name='创建人'),
        ),
        migrations.AddField(
            model_name='productcimage',
            name='ul_product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Products'),
        ),
        migrations.AddField(
            model_name='product2package',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Products'),
        ),
        migrations.AddField(
            model_name='product2package',
            name='product_package',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.ProductPackage'),
        ),
        migrations.AddField(
            model_name='product2area',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.RegionalManagement'),
        ),
        migrations.AddField(
            model_name='product2area',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Products'),
        ),
        migrations.AddField(
            model_name='permission2action2role',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Role'),
        ),
        migrations.AddField(
            model_name='package2product',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Products'),
        ),
        migrations.AddField(
            model_name='package2product',
            name='product_package',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.ProductPackage'),
        ),
        migrations.AddField(
            model_name='orders',
            name='p_business',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.ProcessStep'),
        ),
        migrations.AddField(
            model_name='orders',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Users'),
        ),
        migrations.AddField(
            model_name='orderpayment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Users', verbose_name='支付用户'),
        ),
        migrations.AddField(
            model_name='mytask',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Orders', verbose_name='订单号'),
        ),
        migrations.AddField(
            model_name='mytask',
            name='order_serice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.OrderSerice', verbose_name='服务订单'),
        ),
        migrations.AddField(
            model_name='messagesverifycode',
            name='m_user',
            field=models.ForeignKey(db_column='m_User_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Users'),
        ),
        migrations.AddField(
            model_name='messagessend',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Orders'),
        ),
        migrations.AddField(
            model_name='employees',
            name='position',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Position', verbose_name='职位'),
        ),
        migrations.AddField(
            model_name='employees',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reposition.Role', verbose_name='权限角色'),
        ),
        migrations.AddField(
            model_name='employee2role',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees'),
        ),
        migrations.AddField(
            model_name='employee2role',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Role'),
        ),
        migrations.AddField(
            model_name='clientinfo',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees', verbose_name='归属人'),
        ),
        migrations.AddField(
            model_name='bxslider',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees'),
        ),
        migrations.AddField(
            model_name='author',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Employees'),
        ),
        migrations.AddField(
            model_name='articlestag',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Author'),
        ),
        migrations.AddField(
            model_name='articlespraise',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Users'),
        ),
        migrations.AddField(
            model_name='articlescomements',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Users'),
        ),
        migrations.AddField(
            model_name='articlescategory',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Author'),
        ),
        migrations.AddField(
            model_name='articles',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.Author'),
        ),
        migrations.AddField(
            model_name='articles',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reposition.ArticlesCategory'),
        ),
    ]
